
https://www.w3schools.com/python/python_regex.asp

findall	  Returns a list containing all matches
search	  Returns a Match object if there is a match anywhere in the string
split	    Returns a list where the string has been split at each match
sub	      Replaces one or many matches with a string


[]	A set of characters	                                                        "[a-m]"
\	  Signals a special sequence (can also be used to escape special characters)	"\d"
.   Any character (except newline character)	                                  "he..o"	
^	  Starts with	                                                                "^hello"	
$	  Ends with	                                                                  "world$"	
*	  Zero or more occurrences	                                                  "aix*"	
+	  One or more occurrences	                                                    "aix+"	
{}	Exactly the specified number of occurrences	                                "al{2}"	
|	  Either or	                                                                  "falls|stays"	
()	Capture and group	 


https://towardsdatascience.com/a-very-easy-tutorial-to-learn-python-regular-expression-re-c42fbbc01ef2




# pattern = r"\w+"
# text = "Who is there far 0123"
# x = re.findall(pattern, text)
# print(x)
## output
# ['Who', 'is', 'there', 'far', '0123']

# pattern = r"\w+"
# text = "Who is there far 0123"
# x = re.search(pattern, text)
# print(x)
## output
# <re.Match object; span=(0, 3), match='Who'>



That's because of the part of your pattern for words with 
an apostrophe in them. '?[a-zA-Z0-9]? allows for both the 
postrophe or the alphanumeric character after to be independently 
present or not. If you do not want to include the apostrophes 
at the end of words, then use a non-capturing group so that 
apostrophe plus alphanumeric character can either present together or both missing:

pattern = r"[a-zA-Z0-9]+(?:'[a-zA-Z0-9])?[^'_,:! \.]?"

# here the non-capturing group is (?:'[a-zA-Z0-9])
